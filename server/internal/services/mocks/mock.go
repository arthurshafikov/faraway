// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/services.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQuotes is a mock of Quotes interface.
type MockQuotes struct {
	ctrl     *gomock.Controller
	recorder *MockQuotesMockRecorder
}

// MockQuotesMockRecorder is the mock recorder for MockQuotes.
type MockQuotesMockRecorder struct {
	mock *MockQuotes
}

// NewMockQuotes creates a new mock instance.
func NewMockQuotes(ctrl *gomock.Controller) *MockQuotes {
	mock := &MockQuotes{ctrl: ctrl}
	mock.recorder = &MockQuotesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuotes) EXPECT() *MockQuotesMockRecorder {
	return m.recorder
}

// GetQuote mocks base method.
func (m *MockQuotes) GetQuote() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuote")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetQuote indicates an expected call of GetQuote.
func (mr *MockQuotesMockRecorder) GetQuote() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuote", reflect.TypeOf((*MockQuotes)(nil).GetQuote))
}

// MockHash is a mock of Hash interface.
type MockHash struct {
	ctrl     *gomock.Controller
	recorder *MockHashMockRecorder
}

// MockHashMockRecorder is the mock recorder for MockHash.
type MockHashMockRecorder struct {
	mock *MockHash
}

// NewMockHash creates a new mock instance.
func NewMockHash(ctrl *gomock.Controller) *MockHash {
	mock := &MockHash{ctrl: ctrl}
	mock.recorder = &MockHashMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHash) EXPECT() *MockHashMockRecorder {
	return m.recorder
}

// GetHash mocks base method.
func (m *MockHash) GetHash(data []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash", data)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetHash indicates an expected call of GetHash.
func (mr *MockHashMockRecorder) GetHash(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockHash)(nil).GetHash), data)
}

// RandomHash mocks base method.
func (m *MockHash) RandomHash() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomHash")
	ret0, _ := ret[0].(string)
	return ret0
}

// RandomHash indicates an expected call of RandomHash.
func (mr *MockHashMockRecorder) RandomHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomHash", reflect.TypeOf((*MockHash)(nil).RandomHash))
}

// MockProofOfWorkChecker is a mock of ProofOfWorkChecker interface.
type MockProofOfWorkChecker struct {
	ctrl     *gomock.Controller
	recorder *MockProofOfWorkCheckerMockRecorder
}

// MockProofOfWorkCheckerMockRecorder is the mock recorder for MockProofOfWorkChecker.
type MockProofOfWorkCheckerMockRecorder struct {
	mock *MockProofOfWorkChecker
}

// NewMockProofOfWorkChecker creates a new mock instance.
func NewMockProofOfWorkChecker(ctrl *gomock.Controller) *MockProofOfWorkChecker {
	mock := &MockProofOfWorkChecker{ctrl: ctrl}
	mock.recorder = &MockProofOfWorkCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProofOfWorkChecker) EXPECT() *MockProofOfWorkCheckerMockRecorder {
	return m.recorder
}

// CheckNonce mocks base method.
func (m *MockProofOfWorkChecker) CheckNonce(hash, nonce []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNonce", hash, nonce)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckNonce indicates an expected call of CheckNonce.
func (mr *MockProofOfWorkCheckerMockRecorder) CheckNonce(hash, nonce interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNonce", reflect.TypeOf((*MockProofOfWorkChecker)(nil).CheckNonce), hash, nonce)
}

// GetDifficulty mocks base method.
func (m *MockProofOfWorkChecker) GetDifficulty() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDifficulty")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetDifficulty indicates an expected call of GetDifficulty.
func (mr *MockProofOfWorkCheckerMockRecorder) GetDifficulty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDifficulty", reflect.TypeOf((*MockProofOfWorkChecker)(nil).GetDifficulty))
}
