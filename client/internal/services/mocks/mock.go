// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/services.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHash is a mock of Hash interface.
type MockHash struct {
	ctrl     *gomock.Controller
	recorder *MockHashMockRecorder
}

// MockHashMockRecorder is the mock recorder for MockHash.
type MockHashMockRecorder struct {
	mock *MockHash
}

// NewMockHash creates a new mock instance.
func NewMockHash(ctrl *gomock.Controller) *MockHash {
	mock := &MockHash{ctrl: ctrl}
	mock.recorder = &MockHashMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHash) EXPECT() *MockHashMockRecorder {
	return m.recorder
}

// Hash mocks base method.
func (m *MockHash) Hash(data []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", data)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Hash indicates an expected call of Hash.
func (mr *MockHashMockRecorder) Hash(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockHash)(nil).Hash), data)
}

// MockProofOfWork is a mock of ProofOfWork interface.
type MockProofOfWork struct {
	ctrl     *gomock.Controller
	recorder *MockProofOfWorkMockRecorder
}

// MockProofOfWorkMockRecorder is the mock recorder for MockProofOfWork.
type MockProofOfWorkMockRecorder struct {
	mock *MockProofOfWork
}

// NewMockProofOfWork creates a new mock instance.
func NewMockProofOfWork(ctrl *gomock.Controller) *MockProofOfWork {
	mock := &MockProofOfWork{ctrl: ctrl}
	mock.recorder = &MockProofOfWorkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProofOfWork) EXPECT() *MockProofOfWorkMockRecorder {
	return m.recorder
}

// FindNonce mocks base method.
func (m *MockProofOfWork) FindNonce(data []byte, difficulty int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNonce", data, difficulty)
	ret0, _ := ret[0].(int)
	return ret0
}

// FindNonce indicates an expected call of FindNonce.
func (mr *MockProofOfWorkMockRecorder) FindNonce(data, difficulty interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNonce", reflect.TypeOf((*MockProofOfWork)(nil).FindNonce), data, difficulty)
}
